content:
  - section: Computer Science
    prompts:
      - prompt: What is the difference between a list and set?
      - prompt: How do you think in terms of Big-O?
      - prompt:
  - section: Object Oriented Programming
    prompts:
      - prompt: What is the difference between a class and object?
      - prompt: What is encapsulation?
      - prompt: What is polymorphism?
      - prompt: Describe a use case for inheritance
      - prompt: What are pros and cons of inheritance?
      - prompt: Describe some aspects of the SOLID principles
        details: |
          - Single Responsbility principle
          - Open-closed principle
          - Liskov substitution principle (multiple-contracts)
          - Interface segregation principle
          - Dependency inversion principle
      - prompt: What role does mutability play in object oriented design?
      - prompt: What are the pros and cons of Object Oriented abstraction?
  - section: Java
    prompts:
      - prompt: What is the difference between an abstract class and an interface?
      - prompt: Why is it often useful to use type List as an argument type versus ArrayList?
      - prompt: ArrayList, LinkedList, Vector, Stack all implement the List interface; what are the major differences?
      - prompt: Describe the behavior of the JVM when a Java program is first run
      - prompt: What is the licensing situation with Orcale regarding the JVM?
      - prompt: What is the value of the final keyword in Java?
      - prompt: How do you make use of Exceptions in Java?
      - prompt: How do you decide enums are right for a given use case?
  - section: .NET
    prompts:
      - prompt: What are pros and cons of the CLR?
      - prompt: What are the broad capabilities of .NET Core?
  - section: Design Patterns
    prompts:
      - prompt: Describe the singleton pattern
      - prompt: Describe the factory pattern
      - prompt: Describe the vistor pattern
      - prompt: Describe the observer pattern
      - prompt: Describe MVC
      - prompt: Describe Inversion of Control
      - prompt: Describe Dependency Injection
      - prompt: Why are declarative code solutions often better than imperative solutions?
  - section: JavaScript
    prompts:
      - prompt: How are `==` and `===` equality operators differnt?
      - prompt: Describe closures in JavaScript.
      - prompt: What is a callback? What is a promise?
      - prompt: Explain the `this` keyword in JavaScript, and common issues encountered with it.
      - prompt: What is the differences between `call` and `apply` functions?
      - prompt: What is the purpose of the `bind` function?
      - prompt: Why is extending core prototypes a bad practice?
      - prompt: What is the difference between an ES6 arrow function and a regular function?
      - prompt: What are pros and cons of a JavaScript transpiler like Babel?
      - prompt: What is a major pros and cons of a package manager like NPM?
      - prompt: What is the broad difference in the JavaScript runtime environments, across Node, browser, others?
      - prompt: What is the event loop in JavaScript?
      - prompt: What are the purposes of well known ecosystem tools, like Eslint and Prettier?
      - prompt: What is the relationship of JavaScript to TypeScript?
  - section: Node
    prompts:
      - prompt: How is the single threaded nature of JavaScript different compared to other solutions?
      - prompt: Describe examples of blocking and non-blocking Node APIs
      - prompt: How do you access environment variables in Node?
      - prompt: How are streams used in Node?
      - prompt: Describe the purpose of `module.exports`
      - prompt: Describe the purposes of well known ecosystem packages, like express, axios, lodash
  - section: Spring
    prompts:
      - prompt: What makes Spring Boot easier to use than Spring?
      - prompt: What are the pros and cons of using the `JdbcTemplate` vs an ORM like Spring Data or Hibernate?
      - prompt: Describe the Service Container in Spring
  - section: React
    prompts:
      - prompt: What is the data binding model in React?
      - prompt: What are the major differences between controlled and unctrolled form inputs?
      - prompt: Why is the key property used?
      - prompt: Why are props effectively immutable?
      - prompt: Why does a component re-render?
      - prompt: How can re-rendering be controlled?
      - prompt: Describe a use case for a higher order component
      - prompt: How are render props used?
      - prompt: When should you use the `componentWillMount` lifecycle method?
      - prompt: Describe `Suspence` and its relationship to data loading and presentation
      - prompt: Describe the difference between class-based React and hooks-based React code
      - prompt: What the do the arguments to `useEffect` determine?
      - prompt: How useful is Context as a Redux-replacement?
      - prompt: What is the purpose of a library like Immer with React/Redux?
      - prompt: Describe an organizational strategy for Redux related code
      - prompt: Describe how React can be used in web and native situations
      - prompt: What are the pros and cons of component level tests?
  - section: AngularJS
    prompts:
      - prompt: What is the data binding model in AngularJS?
      - prompt: How is dependency injection used?
      - prompt: What are major differences between a component and a controller?
  - section: Angular
    prompts:
      - prompt: What makes Angular different from AngularJS?
      - prompt: How does the Ahead of Time compiler improve performance?
      - prompt: What role do modules play?
      - prompt: What is the major differences between components and directives?
      - prompt: How does Angular's integration with TypeScript improve the Developer Experience?
  - section: Vue
    prompts:
      - prompt: What is the data binding model in Vue?
      - prompt: What are the challenges of updating values of an array in a components state?
      - prompt: Describe a use case for a watcher
      - prompt: Describe a user case for handling two-way state changes directly, without `v-model`
      - prompt: Describe a user case for using slots
      - prompt: How do you structure your Vuex code?
      - prompt: Describe pros and cons of the Vue Router
      - prompt: Describe how the Vue CLI helps get a project started
      - prompt: Why is the SFC concept important in Vue?
      - prompt: Describe the use case for a render function
  - section: Database
    prompts:
      - prompt: Why is referential integrity important?
      - prompt: What are the use cases for Relational and Document based databases?
      - prompt: What are the risks of using SQL directly?
      - prompt: What are the benefits of using an abstraction ORM?
      - prompt: Describe eager and lazy loading
      - prompt: Why are database transactions useful?
      - prompt: What are pros and cons of free/open source and paid/proprietary databases? (MySQL vs Oracle)
  - section: Testing
    prompts:
      - prompt: How do you test your code so you feel confident in it?
      - prompt: What is the purpose of unit testing? Integration testing? Functional testing? End-to-end testing?
      - prompt: Suppose a client could only afford to do one of these; unit or integration testing, which would you suggest?
      - prompt: When would you intentionally not write test code?
      - prompt: Which do you like better, TDD or BDD?
  - section: Practice
    prompts:
      - prompt: What is your approach to refactoring?
      - prompt: How do you keep code DRY?
      - prompt: Describe a situation that needed more than print-based debugging
  - section: Architecture
    todo: this needs a proper name
    prompts:
      - prompt: What are pros and cons of REST, SOAP, RPC?
      - prompt: What are differences between monoliths and microservices?
      - prompt: What do you consider when communicating between systems?
      - prompt: How do you separate systems into domains?
      - prompt: When evaluating interfaces between systems, how do you decide on synchronous versus asynchronous interfaces?
      - prompt: When evaluating interfaces between systems, how do you agree on those interfaces and communicate them between systems?
      - prompt: How do you think differently about systems continuous integration, continuous delivery, and continuous deployment is or is not implemented?
      - prompt: Why are the 12 factor app principles a useful guide?
      - prompt: How do you decide if eventual consistency is acceptable in a system?
      - prompt: What are your criteria for scaling a solution?
      - prompt: What are your criteria for choosing a protocol for over the wire? (XML, JSON, Protobuf)
  - section: Supervision
    prompts:
      - prompt: What kind of supervision have you provided?
      - prompt: What kind of supervision have you received?
      - prompt: How do you break down tasks for more junior team members?
      - prompt: How do you suummarize progress to more senior team members?
  - section: Mentoring
    prompts:
      - prompt: What kind of mentorship have you provided?
      - prompt: What kind of mentorship have you received?
      - prompt: How do you review code?
      - prompt: How do you pair-program?
  - section: Leadership
    prompts:
      - prompt: What kind of leadership helps you thrive?
      - prompt: How have you lead technical excellence?
      - prompt: How do you keep up on new techniques?
      - prompt: How do you know when its acceptable to delegate decisions?
